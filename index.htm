<!doctype html>
<html>
  <head>    
    <script src="js/automata_framework.js"></script> 
    <script src="js/automata_sentence.js"></script>     
    <meta charset="utf-8" />
	<title>Iloko Syntactic Checker</title>

    <link href="css/bootstrap.min.css" rel="stylesheet">
    <link href="css/freelancer.css" rel="stylesheet">
    <link href="css/font-awesome.min.css" rel="stylesheet" type="text/css">
  </head>
  <body id="page-top" class="index">
        <!-- Navigation -->
    <nav class="navbar navbar-default navbar-fixed-top">
        <div class="container">
            <div class="navbar-header page-scroll">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="#page-top">Iloko Dialect Syntactic Checker</a>
            </div>
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                    <li class="hidden">
                        <a href="#page-top"></a>
                    </li>
                    <li class="page-scroll">
                        <a href="#check">Check Sentence</a>
                    </li>
                    <li class="page-scroll">
                        <a href="#about">About</a>
                    </li>
                    <li class="page-scroll">
                        <a href="#contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
	    <!-- Header -->
    <header id="check">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <img class="img-responsive" src="img/windows-logo.png" alt="">
                    <div class="intro-text">
                        <span class="name">Check Sentence</span>
                        <hr class="star-light">
                        <span class="skills">
							<input type="text" id="input" value="mangan kan ading" />
							<button type="submit" onclick="evalSentence()" class="btn btn-primary">Check</button>
						</span>    
                    </div>
                </div>
            </div>
        </div>
    </header>
	<!-- Output Section -->
    <section id="about">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                    <h2>Checker Output</h2>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-4 col-lg-offset-2">
                    <div id="output">
					</div>
                </div>
            </div>
        </div>
    </section>	
    <!-- Footer -->
    <footer class="text-center">
        <div class="footer-above">
            <div class="container">
                <div class="row">
                    <div class="footer-col col-md-4">
                        <h3>Location</h3>
                        <p>University of the Cordilleras<br>Gov. Pack Road, Baguio City</p>
                    </div>
                    <div class="footer-col col-md-4">
                        <h3>The Developers</h3>
                        <ul class="list-inline">
                            <li class="profile-pic">
                                <a href="#" class="btn-social btn-outline"><img src="img/jason.jpg" alt="..." class="img-circle profile_img"></a>
                            </li>
                            <li>
                                <a href="#" class="btn-social btn-outline"><i class="fa fa-fw fa-google-plus"></i></a>
                            </li>
                            <li>
                                <a href="#" class="btn-social btn-outline"><i class="fa fa-fw fa-twitter"></i></a>
                            </li>
                            <li>
                                <a href="#" class="btn-social btn-outline"><i class="fa fa-fw fa-linkedin"></i></a>
                            </li>
                            <li>
                                <a href="#" class="btn-social btn-outline"><i class="fa fa-fw fa-dribbble"></i></a>
                            </li>
                        </ul>
                    </div>
                    <div class="footer-col col-md-4">
                        <h3>About IDSC</h3>
                        <p>IDSC is a free to use, open source syntactic checker for the Iloko Dialect. <a href="#check">Start IDSC</a>.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="footer-below">
            <div class="container">
                <div class="row">
                    <div class="col-lg-12">
                        Copyright &copy; 2016 Iloko Dialect Syntactic Checker 
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <!-- jQuery -->
    <script src="js/jquery.js"></script>
    <!-- Bootstrap Core JavaScript -->
    <script src="js/bootstrap.min.js"></script>	
	
	    <script>
      var theWordList = [];
      theWordList = readList("lists/stopword_list.txt");
     
      function evalSentence(){
        // make tokens
        var tokens = document.getElementById("input").value.replace(/\s+/g,' ').trim().split(" ");        
        // remove stopwords
        for ( var i = 0; i< tokens.length; i++){
          for ( var j = 0; j< theWordList.length; j++){
            if(tokens[i] == theWordList[j]){
              tokens.splice(i, 1);
            }
          }
        }       
        // multidimensional array. element: [original_word, stemmed_word, part_of_speech]
        var mtokens = [];
        for(var i = 0; i < tokens.length; i++){
          mtokens.push([tokens[i],"",""]);
        }       
        // tagging through collocates
               
        var promises = [];
        for (var i = 0; i < mtokens.length; i++) {
          promises.push($.ajax({
            url: "/UCP/getCollocates.php",
            type: "POST",
            data: JSON.stringify({'toFind': 'awan'}),
            contentType: "application/json"
          }));
        }
        $.when.apply($, promises).then(function() {
          // returned data is in arguments[0][0], arguments[1][0], ... arguments[9][0]
          
          var theWordList2 = []; 
          for(var i = 0; i < mtokens.length; i++){
            theWordList2 = arguments[i][0];
            
            if(i > 1){
              for(var m = 0; m < theWordList2.length; m++){
                if(mtokens[i-2][0] === theWordList2[m][0][0]){ // i-2
                  if(mtokens[i-1][0] === theWordList2[m][1][0]){ // i-1
                    mtokens[i][2] = theWordList2[m][2][1];
                  }
                }
              }
            }
            if(i >= 1 && mtokens[i][2] === ""){
              for(var m = 0; m < theWordList2.length; m++){
                if(mtokens[i-1][0] === theWordList2[m][1][0]){ // i-1
                  mtokens[i][2] = theWordList2[m][2][1];
                }
              }
            }
          }
          
          console.log(mtokens);
          // TODO
          // word stemming and dictionary tagging     

          
          // sentence pattern tagging
          for(var i = 0; i < mtokens.length; i++){
            if(mtokens[i][2] === ""){
              if(i > 1){
                tree.traverseBF(function(node) {
                  if(mtokens[i-2][2] === node.data){ // i-2
                    for(var j = 0; j < node.children.length; j++){
                      if(mtokens[i-1][2] === node.children[j].data){ // i-1
                        for(var k = 0; k < node.children[j].children.length; k++){
                          if(node.children[j].children[k].data !== "END"){
                            // TODO
                            // take for example the tag of the last node on the list of possible tags for the i-th word
                            mtokens[i][2] = node.children[j].children[k].data;
                            break;
                          }
                        }
                      }
                    }
                  }
                });
              }
              if(i >= 1 && mtokens[i][2] === ""){
                tree.traverseBF(function(node) {
                  if(mtokens[i-1][2] === node.data){ // i-1
                    for(var j = 0; j < node.children.length; j++){
                      if(node.children[j].data !== "END"){
                        // TODO
                        // take for example the tag of the last node on the list of possible tags for the i-th word
                        mtokens[i][2] = node.children[j].data;
                      }
                    }
                    if(mtokens[i][2] === ""){
                      mtokens[i][2] = "N"; // default for 2nd word and up
                    }
                  }
                });
              }else if(mtokens[i][2] === ""){
                mtokens[i][2] = "V"; // default for first word. Verb is the most common tag for first word
              }
            }
          }
          // print results
          var temp = "";
          for(var i = 0; i < mtokens.length; i++){
            temp = temp + mtokens[i][0] + " : " + mtokens[i][2] + "<br />";
          }
          document.getElementById("output").innerHTML = temp;            
          
        }, function() {
            // error occurred
        });
      } // end evalSentence     
      
      // get JSON formatted data and push in an array
      function readList(file){
        var wordList = [];
        var rawFile = new XMLHttpRequest();
        rawFile.open("GET", file, true);
        rawFile.onreadystatechange = function (){
            if(rawFile.readyState === 4){
                if(rawFile.status === 200 || rawFile.status == 0){
                    if("" != rawFile.responseText){
                        var allText = JSON.parse(rawFile.responseText);
                        for(i=0;i<allText.length;i++){
                          wordList.push(allText[i]);
                        }
                    }else{
                        console.log("list is empty");
                    }
                }
            }
        }
        rawFile.send(null);
        return wordList;
      }
      
    </script>
  </body>
</html>
